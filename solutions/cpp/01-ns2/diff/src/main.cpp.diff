@@ -20,39 +20,35 @@
         } else {
             throw std::runtime_error("Invalid encoded value: " + encoded_value);
         }
     } else {
         throw std::runtime_error("Unhandled encoded value: " + encoded_value);
     }
 }

 int main(int argc, char* argv[]) {
     // Flush after every std::cout / std::cerr
     std::cout << std::unitbuf;
     std::cerr << std::unitbuf;

     if (argc < 2) {
         std::cerr << "Usage: " << argv[0] << " decode <encoded_value>" << std::endl;
         return 1;
     }

     std::string command = argv[1];

     if (command == "decode") {
         if (argc < 3) {
             std::cerr << "Usage: " << argv[0] << " decode <encoded_value>" << std::endl;
             return 1;
         }
-        // You can use print statements as follows for debugging, they'll be visible when running tests.
-        std::cerr << "Logs from your program will appear here!" << std::endl;
-
-        // Uncomment the code below to pass the first stage
-        // std::string encoded_value = argv[2];
-        // json decoded_value = decode_bencoded_value(encoded_value);
-        // std::cout << decoded_value.dump() << std::endl;
+        std::string encoded_value = argv[2];
+        json decoded_value = decode_bencoded_value(encoded_value);
+        std::cout << decoded_value.dump() << std::endl;
     } else {
         std::cerr << "unknown command: " << command << std::endl;
         return 1;
     }

     return 0;
 }
